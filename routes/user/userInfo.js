const express = require('express');
const router = express.Router();
const db = require('../../db');
const verifyToken = require('../../middleware/verifyToken');
const path = require('path');
const fs = require('fs');
const multer = require('multer');

// üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–∫–∏
const uploadDir = path.join(__dirname, '../../uploads');
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);

// üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDir),
  filename: (req, file, cb) => {
    const unique = Date.now() + '-' + Math.round(Math.random() * 1e9);
    const ext = path.extname(file.originalname);
    cb(null, 'apply_' + unique + ext);
  }
});

// ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
const fileFilter = (req, file, cb) => {
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'));
  }
};

// üéØ –°–æ–±–∏—Ä–∞–µ–º multer —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
const upload = multer({ storage, fileFilter });

// üîπ –ü—Ä–æ—Ñ–∏–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
router.get('/profile-full', verifyToken, async (req, res) => {
  const { userID, username, role } = req.user;

  try {
    const [artistRows] = await db.query('SELECT * FROM artists WHERE UserID = ?', [userID]);
    const isArtist = artistRows.length > 0 && artistRows[0].Status === 'approved';

    res.json({
      userID,
      username,
      role,
      isArtist,
      artistID: isArtist ? artistRows[0].ArtistID : null
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// üîπ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç
router.post('/apply-artist', verifyToken, upload.fields([
  { name: 'avatar', maxCount: 1 },
  { name: 'samples', maxCount: 5 }
]), async (req, res) => {
  const userID = req.user.userID;
  const { bio, socialLinks } = req.body;
  const avatarFile = req.files['avatar']?.[0];
  const sampleFiles = req.files['samples'] || [];
  const avatarPath = avatarFile ? '/uploads/' + avatarFile.filename : null;

  try {
    const [existing] = await db.query('SELECT * FROM artists WHERE UserID = ?', [userID]);

if (existing.length > 0) {
  const artist = existing[0];

  if (artist.Status === 'approved' || artist.Status === 'pending') {
    return res.status(400).send('–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –≤—ã —É–∂–µ —Ö—É–¥–æ–∂–Ω–∏–∫');
  }

  if (artist.Status === 'rejected') {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    await db.query(`
      UPDATE artists 
      SET Bio = ?, SocialLinks = ?, Status = 'pending', AvatarPath = ?
      WHERE ArtistID = ?
    `, [bio, socialLinks, avatarPath, artist.ArtistID]);

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
    await db.query('DELETE FROM artist_samples WHERE ArtistID = ?', [artist.ArtistID]);

    // –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ
    for (const file of sampleFiles) {
      const imagePath = '/uploads/' + file.filename;
      await db.query(`
        INSERT INTO artist_samples (ArtistID, ImagePath)
        VALUES (?, ?)
      `, [artist.ArtistID, imagePath]);
    }

    return res.send('–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.');
  }
}


    // –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É artists
    const [insertRes] = await db.query(`
      INSERT INTO artists (UserID, Bio, SocialLinks, Status, AvatarPath)
      VALUES (?, ?, ?, 'pending', ?)
    `, [userID, bio, socialLinks, avatarPath]);

    const artistID = insertRes.insertId;

    // –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ artist_samples
    for (const file of sampleFiles) {
      const imagePath = '/uploads/' + file.filename;
      await db.query(`
        INSERT INTO artist_samples (ArtistID, ImagePath)
        VALUES (?, ?)
      `, [artistID, imagePath]);
    }

    res.send('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç.');
  } catch (err) {
    console.error(err);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});


module.exports = router;
